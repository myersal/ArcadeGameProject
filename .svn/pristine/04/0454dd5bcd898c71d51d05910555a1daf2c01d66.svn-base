
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
/**
 * The main class for your arcade game.
 * 
 * You can design your game any way you like, but make the game start
 * by running main here.
 * 
 * Also don't forget to write javadocs for your classes and functions!
 * 
 * @author Buffalo
 *
 */
public class Main {
	private static final int FRAME_WIDTH = 600;
	private static final int FRAME_HEIGTH = 500;
	private static final int BLOCK_WIDTH = FRAME_WIDTH / 15;
	private static final int BLOCK_HEIGHT = FRAME_HEIGTH / 10;
	private static int[][] currentLevel;
	private static boolean canMove;
	private final static int GAP = 10;
	public static long startTime;

	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		currentLevel = new int[10][15];
		try {
			loadLevel("level1");
		} catch (IOException e) {
			e.printStackTrace();
		}
		for (int i = 0; i < currentLevel.length; i++)
		{
			for (int j = 0; j < currentLevel[i].length; j++)
			{
				System.out.println(currentLevel[i][j]);
			}
		}
		
		JFrame frame = new JFrame();
				
//		frame.setSize(FRAME_WIDTH + 20, FRAME_HEIGTH + 40);
		frame.setTitle("DIGGER");
		JPanel panel = new JPanel();
		canMove = true;
		
		
		final LocalEnvironment world = new LocalEnvironment(frame, currentLevel);
		final Scoreboard scoreBoard = new Scoreboard(frame);
		
		class UPressAction extends AbstractAction{
			private JFrame frame;
			private LocalEnvironment world;
			private int currentLevelnumber = 1;
			
			public UPressAction(JFrame frame, LocalEnvironment world){
				this.frame = frame;
				this.world = world;
				
			}
			
			@Override
			public void actionPerformed(ActionEvent e) {
				//loadnext level
				System.out.println("you pressed U");
				
				try {
					if(this.currentLevelnumber<3){
						this.currentLevelnumber++;
					} else {
						this.currentLevelnumber = 1;
					}
						
					this.world.changeLevelTo(loadLevel("level" + currentLevelnumber));
					
					this.frame.repaint();
				} catch (IOException exception) {
					// TODO Auto-generated catch-block stub.
					exception.printStackTrace();
				}
				
			}
			
		}
		class DPressAction extends AbstractAction{
			private JFrame frame;
			private LocalEnvironment world;
			private int currentLevelnumber = 1;
			
			public DPressAction(JFrame frame, LocalEnvironment world){
				this.frame = frame;
				this.world = world;
				
			}
			
			@Override
			public void actionPerformed(ActionEvent e) {
				//loadnext level
				System.out.println("you pressed U");
				
				try {
					if(this.currentLevelnumber>1){
						this.currentLevelnumber--;
					} else{
						this.currentLevelnumber=3;
					}
						
					this.world.changeLevelTo(loadLevel("level" + currentLevelnumber));
					
					this.frame.repaint();
				} catch (IOException exception) {
					// TODO Auto-generated catch-block stub.
					exception.printStackTrace();
				}
				
			}
			
		}
		class UpPressAction extends AbstractAction{

			@Override
			public void actionPerformed(ActionEvent e) {
				//move hero up
				if (canMove)
				{
					canMove = false;
					Main.startTime = System.currentTimeMillis();
				System.out.println("you pressed Up");
				int iOfPlayer = world.player.getYLoc();
				int jOfPlayer = world.player.getXLoc();
				if (iOfPlayer > 0)
				{
				//Checks the next cell for a emerald and eats it if so.
				if(currentLevel[iOfPlayer-1][jOfPlayer]==2)
					scoreBoard.collectEmerald();
				//Moves the player and removes dirt
				currentLevel[iOfPlayer][jOfPlayer] = 0;
				currentLevel[iOfPlayer - 1][jOfPlayer] = 3;
				world.repaint();
				
				}
				;
				}
				
			}
			
		}
		class DownPressAction extends AbstractAction{

			@Override
			public void actionPerformed(ActionEvent e) {
				//move hero down
				if (canMove)
				{
					canMove = false;
					Main.startTime = System.currentTimeMillis();
				System.out.println("you pressed Down");
				int iOfPlayer = world.player.getYLoc();
				int jOfPlayer = world.player.getXLoc();
				if (iOfPlayer < currentLevel.length - 1)
				{
				//Checks the next cell for a emerald and eats it if so.
				if(currentLevel[iOfPlayer+1][jOfPlayer]==2)
					scoreBoard.collectEmerald();
				//Moves the player and removes dirt				
				currentLevel[iOfPlayer][jOfPlayer] = 0;
				currentLevel[iOfPlayer + 1][jOfPlayer] = 3;
				world.repaint();
				
				}
			
				}
				
				
			}
			
		}
		class LeftPressAction extends AbstractAction{

			@Override
			public void actionPerformed(ActionEvent e) {
				//move hero left
				if (canMove)
				{
					canMove = false;
					Main.startTime = System.currentTimeMillis();
				System.out.println("you pressed left");
				int iOfPlayer = world.player.getYLoc();
				int jOfPlayer = world.player.getXLoc();
				if (jOfPlayer > 0)
				{
				//Checks the next cell for a emerald and eats it if so.
				if(currentLevel[iOfPlayer][jOfPlayer-1]==2)
						scoreBoard.collectEmerald();
				//Moves the player and removes dirt
				currentLevel[iOfPlayer][jOfPlayer] = 0;
				currentLevel[iOfPlayer][jOfPlayer - 1] = 3;
				world.repaint();
				
				}
				
				}
				
			}
			
		}

		class RightPressAction extends AbstractAction{

			@Override
			public void actionPerformed(ActionEvent e) {
				//move hero right
				if (canMove)
				{
					canMove = false;
					Main.startTime = System.currentTimeMillis();
				System.out.println("you pressed right");
				int iOfPlayer = world.player.getYLoc();
				int jOfPlayer = world.player.getXLoc();
				if (jOfPlayer < currentLevel[iOfPlayer].length - 1)
				{
				//Checks the next cell for a emerald and eats it if so.
				if(currentLevel[iOfPlayer][jOfPlayer+1]==2)
					scoreBoard.collectEmerald();
				//Moves the player and removes dirt
				currentLevel[iOfPlayer][jOfPlayer] = 0;
				currentLevel[iOfPlayer][jOfPlayer + 1] = 3;
				world.repaint();
				
				}
				
				}
				
			}
			
		}
		
		
		
		world.setPreferredSize(new Dimension(FRAME_WIDTH,FRAME_HEIGTH));
		world.getInputMap().put(KeyStroke.getKeyStroke('u'), "DoU");
		world.getActionMap().put("DoU", new UPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke('d'), "DoD");
		world.getActionMap().put("DoD", new DPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0), "DoUp");
		world.getActionMap().put("DoUp", new UpPressAction());
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0), "DoDown");
		world.getActionMap().put("DoDown", new DownPressAction());
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0), "DoLeft");
		world.getActionMap().put("DoLeft", new LeftPressAction());
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0), "DoRight");
		world.getActionMap().put("DoRight", new RightPressAction());
		
//		frame.setMaximumSize(new Dimension(600,600));
		frame.setResizable(true);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
//		panel.setSize(600,500);
//		world.setSize(600, 400);
		scoreBoard.setSize(600, 100);
		scoreBoard.setBackground(Color.RED);
		panel.add(Box.createVerticalStrut(GAP));
		panel.add(world);
		panel.add(Box.createVerticalStrut(GAP));
		panel.add(scoreBoard);
		frame.add(panel);
		
//		frame.add(world);
//		frame.add(scoreBoard);
				
		frame.pack();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		startTime = System.currentTimeMillis();
		while(true)
		{
		if (System.currentTimeMillis() - startTime > 200)
		{
			startTime = System.currentTimeMillis();
			canMove = true;
		}
		}
		
		
		
		
	
	}
	public static int[][] loadLevel(String levelNumber) throws IOException {
		String fileName = "C:/EclipseWorkspaces/csse220/ArcadeGameProject/src/";
		fileName = fileName + levelNumber;
		File file = new File(fileName);
		
		Scanner inScanner = null;
		try {
			inScanner = new Scanner(file);
			String stringer = "";
			for (int i = 0; i < currentLevel.length; i++)
			{
				
				for (int j = 0; j < currentLevel[i].length; j++)
				{
					
					currentLevel[i][j] = inScanner.nextInt();
				}
			}

				

			
		} finally {
			inScanner.close();
				  }
		return currentLevel;
	}
	
	public boolean getCanMove()
	{
		return canMove;
	}
	
}
