import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import sun.audio.*;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.KeyStroke;

/**
 * The main class for your arcade game.
 * 
 * You can design your game any way you like, but make the game start by running
 * main here.
 * 
 * Also don't forget to write javadocs for your classes and functions!
 * 
 * @author Buffalo and @author Goebelag
 *
 */
public class Main {
	// width of frame
	private static final int FRAME_WIDTH = 600;
	// height of frame
	private static final int FRAME_HEIGTH = 500;
	// width of block
	// private static final int BLOCK_WIDTH = FRAME_WIDTH / 15;
	// height of block
	// private static final int BLOCK_HEIGHT = FRAME_HEIGTH / 10;
	// double array representing the gameboard with ints that represent what is
	// in each spot
	private static int[][] currentLevel;
	// boolean to tell if the player can move
	private static boolean canMove;
	// boolean to tell if the bullet can be fired
	private static boolean canShoot;
	// Gap between the scoreboard and LocalEnviroment
	private final static int GAP = 10;
	// a long that keeps track of time in order to implement timer
	public static long startTime;
	// a long that keeps track of time in order to implement timer to shoot
	public static long shootTime;
	// level number
	public static int levelNumber = 1;
	// the last direcion the player moved, starting at right;
	protected static String lastDirectionMoved = "right";
	// boolean that tells if the
	protected static boolean pause = false;
	// list of enemy objects
	static ArrayList<AbstractEnemy> enemies;
	// number of lives left
	private static int lives;
	// the frame
	private static JFrame frame;
	// list of gold
	static ArrayList<GoldBag> gold;
	// tell wether the player has dynamite
	private static boolean hasDynamite = false;
	
	private static Thread mainGameThread;

	private static Thread enemyThread;

	private static Thread goldThread;

	/**
	 * @param args
	 *            main method runs the program
	 */
	public static void main(String[] args) {
		// creates the currentlevel that will be 15 blocks long and 10 blocks
		// high
		Thread musicThread = new Thread(musicPlayer);
		musicThread.start();
		
		currentLevel = new int[10][15];
		enemies = new ArrayList<AbstractEnemy>();

		gold = new ArrayList<GoldBag>();
		lives = 3;

		try {
			loadLevel("level1");
		} catch (IOException e) {
			e.printStackTrace();
		}
		// for (int i = 0; i < currentLevel.length; i++) {
		// for (int j = 0; j < currentLevel[i].length; j++) {
		// System.out.println(currentLevel[i][j]);
		// }
		// }

		frame = new JFrame();

		// frame.setSize(FRAME_WIDTH + 20, FRAME_HEIGTH + 40);
		frame.setTitle("DIGGER");
		JPanel panel = new JPanel();
		canMove = true;

		final LocalEnvironment world = new LocalEnvironment(frame, currentLevel);
		final Scoreboard scoreBoard = new Scoreboard(frame);
		final InfoComponent infoBoard = new InfoComponent(frame, lives);
		

		// Animation runnables

		Runnable gameMovements = new Runnable() {

			@Override
			public void run() {
				// everything that moves in the game starts here
				try {
					while (true) {
						if (enemies.size() < 2 + levelNumber) {
							Thread.sleep(5000);
							if (Math.random() > .1) {
								Nobbin nobbin = new Nobbin(world, 11, 0);
								nobbin.drawOn(world.getGraphics());
								world.getLevel()[0][11] = 5;
								enemies.add(nobbin);
							} else {
								Hobbin hobbin = new Hobbin(world, 11, 0);
								hobbin.drawOn(world.getGraphics());
								world.getLevel()[0][11] = 4;
								enemies.add(hobbin);
							}
						}
						infoBoard.repaint();
					}
				} catch (InterruptedException e) {
					// do nothing
				}

			}

		};
		// animates all of the enemies
		Runnable enemyAnimation = new Runnable() {

			@Override
			public void run() {

				try {
					while (true) {

						Thread.sleep(290);
						for (int i = 0; i < enemies.size(); i++) {
							int size = enemies.size();
							if (enemies.get(i).world.getLevel()[enemies.get(i).yLoc][enemies
									.get(i).xLoc] == 0
									|| enemies.get(i).world.getLevel()[enemies
											.get(i).yLoc][enemies.get(i).xLoc] == 10) {
								enemies.get(i).die();
								enemies.remove(i);
							} else {

								enemies.get(i).move();

								if (size == enemies.size()
										&& Math.random() < .01) {
									if (enemies.get(i).getType() == 4) {
										int currentXLoc = enemies.get(i).xLoc;
										int currentYLoc = enemies.get(i).yLoc;
										Nobbin nobbin = new Nobbin(world,
												currentXLoc, currentYLoc);
										enemies.get(i).die();
										enemies.remove(i);
										nobbin.drawOn(world.getGraphics());
										world.getLevel()[currentYLoc][currentXLoc] = 5;
										enemies.add(nobbin);
									} else {
										int currentXLoc = enemies.get(i).xLoc;
										int currentYLoc = enemies.get(i).yLoc;
										Hobbin hobbin = new Hobbin(world,
												currentXLoc, currentYLoc);
										enemies.get(i).die();
										enemies.remove(i);
										hobbin.drawOn(world.getGraphics());
										world.getLevel()[currentYLoc][currentXLoc] = 4;
										enemies.add(hobbin);
									}
								}
							}
						}
						world.repaint();
					}
				} catch (InterruptedException e) {
					// do nothing
				}

			}

		};

		// for(int k = 0; k < LocalEnvironment.NUMBER_OF_GOLD_BAGS; k++){
		// gold.add(world.getGoldBagList()[k]);
		// }

		// animates the gold when it can drop
		Runnable goldAnimation = new Runnable() {
			@Override
			public void run() {
				gold = world.getGoldBagList();
				try {
					while (true) {
						Thread.sleep(150);
						try {
							ArrayList<Integer> goldRemoval = new ArrayList<Integer>();
							// int size = gold.size();
							for (int i = 0; i < gold.size(); i++) {
								if (gold.get(i).getIsBroken()) {
									goldRemoval.add(i);
									// gold.remove(i);

								}

								// if (level[gold.get(i).getY()][gold
								// .get(i).getX()] == 0
								// || level[gold.get(i).getY()][gold
								// .get(i).getX()] == 3)

								if (gold.get(i).getDropHeight() == 0
										&& gold.get(i).canMove()) {
									Thread.sleep(500);
								}
								gold.get(i).move();
								world.repaint();
							}
							for (int j = 0; j < goldRemoval.size(); j++) {
								gold.remove(goldRemoval.get(goldRemoval.size()
										- 1 - j));
							}
						} catch (NullPointerException e) {
							// do nothing
						}
					}
				} catch (InterruptedException e) {
					// do nothing
				}

			}
		};

		// animates the bullet

		final Runnable bulletAnimation = new Runnable() {

			@Override
			public void run() {

				try {
					while (true) {
						Thread.sleep(150);
						try {
							world.getBullet().move();
							world.repaint();
						} catch (NullPointerException e) {
							// do nothing
						}
					}
				} catch (InterruptedException e) {
					// do nothing
				}

			}

		};

		mainGameThread = new Thread(gameMovements);
		mainGameThread.start();

		enemyThread = new Thread(enemyAnimation);
		enemyThread.start();

		goldThread = new Thread(goldAnimation);
		goldThread.start();

		// End Animation threads

		/**
		 * 
		 * @author goebelag
		 *
		 *         changes level when the button U is pressed
		 */
		@SuppressWarnings("serial")
		class UPressAction extends AbstractAction {
			private JFrame frame;
			private LocalEnvironment world;

			// loads a level
			public UPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;
			}

			/**
			 * @param - ActionEvent e when the event occurs (the U button is
			 *        pressed) the level switches to a new viable level
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// loadnext level
				System.out.println("you pressed U");

				try {
					if (levelNumber < 3) {
						levelNumber++;
					} else {
						levelNumber = 1;
					}

					this.world.changeLevelTo(loadLevel("level" + levelNumber));

					this.frame.repaint();
				} catch (IOException exception) {

					exception.printStackTrace();
				}

			}

		}
		/**
		 * 
		 * @author goebelag
		 * 
		 *         Changes levels inversely when the button D is pressed
		 *
		 */
		@SuppressWarnings("serial")
		class DPressAction extends AbstractAction {
			private JFrame frame;
			private LocalEnvironment world;

			public DPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;

			}

			/**
			 * @param - ActionEvent e when the button is pressed the leve
			 *        lchanges backwards to a viable level
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// loadnext level
				System.out.println("you pressed D");

				try {
					if (levelNumber > 1) {
						levelNumber--;
					} else {
						levelNumber = 3;
					}

					this.world.changeLevelTo(loadLevel("level" + levelNumber));

					this.frame.repaint();
				} catch (IOException exception) {

					exception.printStackTrace();
				}

			}

		}
		/**
		 * 
		 * @author goebelag
		 * 
		 *         moves the player up when the up arrow is pressed
		 *
		 */
		@SuppressWarnings("serial")
		class UpPressAction extends AbstractAction {

			private JFrame frame;
			private LocalEnvironment world;

			public UpPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;
				if (this.frame != frame)
					this.frame = frame;
			}

			/**
			 * if the player can move and has a space above it, it will move up
			 * and update the board
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// move hero up
				lastDirectionMoved = "up";
				System.out.println("you pressed Up");
				int iOfPlayer = this.world.player.getYLoc();
				int jOfPlayer = this.world.player.getXLoc();
				int[][] level = this.world.getLevel();
				if (canMove
						&& level[iOfPlayer][jOfPlayer] == 3
						&& iOfPlayer > 0
						&& level[iOfPlayer - 1][jOfPlayer] != 4
						&& level[iOfPlayer - 1][jOfPlayer] != 5) {
					canMove = false;
					Main.startTime = System.currentTimeMillis();
					
					if (iOfPlayer > 0
							&& level[iOfPlayer - 1][jOfPlayer] != 10) {
						// Checks the next cell for a emerald and eats it if so.
						if (currentLevel[iOfPlayer - 1][jOfPlayer] == 2) {
							scoreBoard.collectEmerald();
							this.world.subtractEmerald();
							if (this.world.getEmeralds() == 0) {
								try {
									levelNumber++;
									if (levelNumber > 3) {
										levelNumber = 1;
									}
									this.world.changeLevelTo(loadLevel("level"
											+ (levelNumber)));
								} catch (IOException exception) {

									exception.printStackTrace();
								}
								this.world.repaint();
								return;
							}
						}
						if (currentLevel[iOfPlayer - 1][jOfPlayer] == 11) {
							scoreBoard.collectGold();
						}
						if (currentLevel[iOfPlayer - 1][jOfPlayer] == 12) {
							hasDynamite = true;
							infoBoard.updatehasDynamite(true);
							infoBoard.repaint();
						}
						// Moves the player and removes dirt
						currentLevel[iOfPlayer][jOfPlayer] = 0;
						currentLevel[iOfPlayer - 1][jOfPlayer] = 3;
						world.player.yLoc = iOfPlayer - 1;
						this.world.repaint();

					}
					;
				}

			}

		}
		/**
		 * 
		 * @author goebelag
		 * 
		 *         moves down when the down arrow is pressed
		 * 
		 *
		 */
		@SuppressWarnings("serial")
		class DownPressAction extends AbstractAction {
			private JFrame frame;
			private LocalEnvironment world;

			public DownPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;
				if (this.frame != frame)
					this.frame = frame;
			}

			/**
			 * if canMove = true then the player moves if there is an empty
			 * space below it and updates the world
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// move hero down
				lastDirectionMoved = "down";
				System.out.println("you pressed Down");
				int[][] level = this.world.getLevel();
				int iOfPlayer = this.world.player.getYLoc();
				int jOfPlayer = this.world.player.getXLoc();
				if (canMove
						&& level[iOfPlayer][jOfPlayer] == 3
						&& iOfPlayer < currentLevel.length - 1
						&& level[iOfPlayer + 1][jOfPlayer] != 4
						&& level[iOfPlayer + 1][jOfPlayer] != 5) {
					canMove = false;
					Main.startTime = System.currentTimeMillis();
					
					if (iOfPlayer < currentLevel.length - 1
							&& level[iOfPlayer + 1][jOfPlayer] != 10) {
						// Checks the next cell for a emerald and eats it if so.
						if (currentLevel[iOfPlayer + 1][jOfPlayer] == 2) {
							scoreBoard.collectEmerald();
							world.subtractEmerald();
							if (this.world.getEmeralds() == 0) {
								try {
									levelNumber++;
									if (levelNumber > 3) {
										levelNumber = 1;
									}
									this.world.changeLevelTo(loadLevel("level"
											+ (levelNumber)));
								} catch (IOException exception) {

									exception.printStackTrace();
								}
								this.world.repaint();
								return;
							}
						}
						if (currentLevel[iOfPlayer + 1][jOfPlayer] == 11) {
							scoreBoard.collectGold();
						}
						if (currentLevel[iOfPlayer + 1][jOfPlayer] == 12) {
							hasDynamite = true;
							infoBoard.updatehasDynamite(true);
							infoBoard.repaint();
						}
						// Moves the player and removes dirt
						currentLevel[iOfPlayer][jOfPlayer] = 0;
						currentLevel[iOfPlayer + 1][jOfPlayer] = 3;
						world.player.yLoc = iOfPlayer + 1;

						world.repaint();

					}

				}

			}

		}
		/**
		 * 
		 * @author goebelag
		 * 
		 *         Fmoves the player left when the left button is pressed
		 *
		 */
		@SuppressWarnings("serial")
		class LeftPressAction extends AbstractAction {

			private JFrame frame;
			private LocalEnvironment world;

			public LeftPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;
				if (this.frame != frame)
					this.frame = frame;
			}

			/**
			 * if canMove = true and there is an empty space to the left of the
			 * player then the player moves left and updates the current state
			 * of the game
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// move hero left
				lastDirectionMoved = "left";
				int iOfPlayer = this.world.player.getYLoc();
				int jOfPlayer = this.world.player.getXLoc();
				int[][] level = this.world.getLevel();
				System.out.println("you pressed left");
				if (canMove
						&& level[iOfPlayer][jOfPlayer] == 3
						&& jOfPlayer > 0
						&& level[iOfPlayer][jOfPlayer - 1] != 4
						&& level[iOfPlayer][jOfPlayer - 1] != 5) {
					canMove = false;
					Main.startTime = System.currentTimeMillis();
					if (jOfPlayer > 0) {
						// Checks the next cell for a emerald and eats it if so.
						if (currentLevel[iOfPlayer][jOfPlayer - 1] == 2) {
							scoreBoard.collectEmerald();
							world.subtractEmerald();
							if (this.world.getEmeralds() == 0) {
								try {
									levelNumber++;
									if (levelNumber > 3) {
										levelNumber = 1;
									}
									this.world.changeLevelTo(loadLevel("level"
											+ (levelNumber)));
								} catch (IOException exception) {

									exception.printStackTrace();
								}
								this.world.repaint();
								return;
							}
						}
						if (currentLevel[iOfPlayer][jOfPlayer - 1] == 11) {
							scoreBoard.collectGold();
						}
						if (currentLevel[iOfPlayer][jOfPlayer - 1] == 12) {
							hasDynamite = true;
							infoBoard.updatehasDynamite(true);
							infoBoard.repaint();
						}
						if (currentLevel[iOfPlayer][jOfPlayer - 1] == 10) {
							if (jOfPlayer - 2 >= 0
									&& currentLevel[iOfPlayer][jOfPlayer - 2] == 0) {
								GoldBag goldLeft = this.world.getGoldBagAtYX(
										iOfPlayer, jOfPlayer - 1);
								currentLevel[iOfPlayer][jOfPlayer - 2] = 10;
								currentLevel[iOfPlayer][jOfPlayer] = 0;
								currentLevel[iOfPlayer][jOfPlayer - 1] = 3;
								goldLeft.setX(iOfPlayer);
								goldLeft.setY(jOfPlayer - 2);
								this.world
										.setGoldBagAtYX(iOfPlayer,
												jOfPlayer - 1, iOfPlayer,
												jOfPlayer - 2);
								this.world.player.xLoc = jOfPlayer - 1;
								this.world.repaint();
							}
						} else {
							// Moves the player and removes dirt
							currentLevel[iOfPlayer][jOfPlayer] = 0;
							currentLevel[iOfPlayer][jOfPlayer - 1] = 3;
							this.world.player.xLoc = jOfPlayer - 1;
							this.world.repaint();
						}
					}

				}

			}

		}

		/**
		 * 
		 * @author goebelag
		 * 
		 *         moves the player to the right if the right button is pressed
		 *
		 */
		@SuppressWarnings("serial")
		class RightPressAction extends AbstractAction {

			private JFrame frame;
			private LocalEnvironment world;

			public RightPressAction(JFrame frame, LocalEnvironment world) {
				this.frame = frame;
				this.world = world;
				if (this.frame != frame)
					this.frame = frame;
			}

			/**
			 * if canMove = true and there is an empty space to the right of the
			 * player then the player will move one space right and update the
			 * current state of the game
			 */
			@Override
			public void actionPerformed(ActionEvent e) {
				// move hero right
				lastDirectionMoved = "right";
				int[][] level = this.world.getLevel();
				int iOfPlayer = this.world.player.getYLoc();
				int jOfPlayer = this.world.player.getXLoc();
				System.out.println("you pressed right");
				if (canMove
						&& level[iOfPlayer][jOfPlayer] == 3
						&& jOfPlayer < currentLevel[0].length - 1
						&& level[iOfPlayer][jOfPlayer + 1] != 4
						&& level[iOfPlayer][jOfPlayer + 1] != 5) {
					canMove = false;
					Main.startTime = System.currentTimeMillis();
					if (jOfPlayer < currentLevel[iOfPlayer].length - 1) {
						// Checks the next cell for a emerald and eats it if so.
						if (currentLevel[iOfPlayer][jOfPlayer + 1] == 2) {
							scoreBoard.collectEmerald();
							this.world.subtractEmerald();
							if (this.world.getEmeralds() == 0) {
								try {
									levelNumber++;
									if (levelNumber > 3) {
										levelNumber = 1;
									}
									this.world.changeLevelTo(loadLevel("level"
											+ (levelNumber)));
								} catch (IOException exception) {

									exception.printStackTrace();
								}
								this.world.repaint();
								return;
							}
						}
						if (currentLevel[iOfPlayer][jOfPlayer + 1] == 11) {
							scoreBoard.collectGold();
						}
						if (currentLevel[iOfPlayer][jOfPlayer + 1] == 12) {
							hasDynamite = true;
							infoBoard.updatehasDynamite(true);
							infoBoard.repaint();
						}
						if (currentLevel[iOfPlayer][jOfPlayer + 1] == 10) {
							if (jOfPlayer + 2 < currentLevel[0].length
									&& currentLevel[iOfPlayer][jOfPlayer + 2] == 0) {
								GoldBag goldRight = this.world.getGoldBagAtYX(
										iOfPlayer, jOfPlayer + 1);
								currentLevel[iOfPlayer][jOfPlayer + 2] = 10;
								currentLevel[iOfPlayer][jOfPlayer] = 0;
								currentLevel[iOfPlayer][jOfPlayer + 1] = 3;
								goldRight.setX(iOfPlayer);
								goldRight.setY(jOfPlayer + 2);
								this.world
										.setGoldBagAtYX(iOfPlayer,
												jOfPlayer + 1, iOfPlayer,
												jOfPlayer + 2);
								this.world.player.xLoc = jOfPlayer + 1;
								this.world.repaint();
							}
						} else {
							// Moves the player and removes dirt
							currentLevel[iOfPlayer][jOfPlayer] = 0;
							currentLevel[iOfPlayer][jOfPlayer + 1] = 3;
							this.world.player.xLoc = jOfPlayer + 1;
							this.world.repaint();
						}

					}

				}

			}

		}

		/**
		 * 
		 * shoots a bullet when the space bar is pressed.
		 *
		 * @author myersal. Created Feb 17, 2015.
		 */

		@SuppressWarnings("serial")
		class SpacePressAction extends AbstractAction {
			private LocalEnvironment world;

			public SpacePressAction(LocalEnvironment world) {
				this.world = world;
			}

			@Override
			public void actionPerformed(ActionEvent e) {
				// handle the weapon button

				System.out.println("You Pressed Space!");
				if (canShoot) {
					canShoot = false;
					int bulletXLoc = this.world.player.getXLoc();
					int bulletYLoc = this.world.player.getYLoc();
					int[][] level = this.world.getLevel();

					if (lastDirectionMoved.equals("up") && bulletYLoc != 0) {
						bulletYLoc--;
						if (level[bulletYLoc][bulletXLoc] == 0)
							level[bulletYLoc][bulletXLoc] = 6;
					} else if (lastDirectionMoved.equals("down")
							&& bulletYLoc != this.world.getLevel().length - 1) {
						bulletYLoc++;
						if (level[bulletYLoc][bulletXLoc] == 0)
							level[bulletYLoc][bulletXLoc] = 7;
					} else if (lastDirectionMoved.equals("left")
							&& bulletXLoc != 0) {
						bulletXLoc--;
						if (level[bulletYLoc][bulletXLoc] == 0)
							level[bulletYLoc][bulletXLoc] = 8;
					} else if (lastDirectionMoved.equals("right")
							&& bulletXLoc != this.world.getLevel()[0].length - 1) {
						bulletXLoc++;
						if (level[bulletYLoc][bulletXLoc] == 0)
							level[bulletYLoc][bulletXLoc] = 9;
					}

					this.world.repaint();

					Thread bulletThread = new Thread(bulletAnimation);
					bulletThread.start();
					infoBoard.updateCanShoot(false);
					infoBoard.repaint();
				}

			}

		}

		/**
		 * 
		 * pauses the game when the "p" button is pressed.
		 *
		 * @author myersal. Created Feb 17, 2015.
		 */

		@SuppressWarnings("serial")
		class PPressAction extends AbstractAction {
			private Thread enemyThread;
			private Thread goldThread;
			private Thread mainGameThread;

			public PPressAction(LocalEnvironment world, Thread enemyThread,
					Thread goldThread, Thread mainGameThread) {
				this.enemyThread = enemyThread;
				this.goldThread = goldThread;
				this.mainGameThread = mainGameThread;
			}

			@SuppressWarnings("deprecation")
			@Override
			public void actionPerformed(ActionEvent e) {
				// pauses everything
				if (!pause) {
					pause = true;
					this.enemyThread.suspend();
					this.goldThread.suspend();
					this.mainGameThread.suspend();
					canMove = false;
					canShoot = false;
					scoreBoard.pauseGame();
				} else {
					pause = false;
					this.enemyThread.resume();
					this.goldThread.resume();
					this.mainGameThread.resume();
					canMove = true;
					canShoot = true;
					scoreBoard.unPauseGame();
				}
			}
		}

		@SuppressWarnings("serial")
		class ZPressAction extends AbstractAction {
			private LocalEnvironment world;

			public ZPressAction(LocalEnvironment world) {
				this.world = world;
			}

			@Override
			public void actionPerformed(ActionEvent e) {
				// a little explosion
				if (hasDynamite) {
					int iOfPlayer = this.world.player.getYLoc();
					int jOfPlayer = this.world.player.getXLoc();
					Dynamite.dynamiteExplode(this.world.getLevel(), iOfPlayer,
							jOfPlayer);
					hasDynamite = false;
					infoBoard.updatehasDynamite(false);
					infoBoard.repaint();
					this.world.repaint();
				}
			}
		}

		// the following implement the changing of levels
		world.setPreferredSize(new Dimension(FRAME_WIDTH, FRAME_HEIGTH));
		world.getInputMap().put(KeyStroke.getKeyStroke('u'), "DoU");
		world.getActionMap().put("DoU", new UPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke('d'), "DoD");
		world.getActionMap().put("DoD", new DPressAction(frame, world));

		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),
				"DoUp");
		world.getActionMap().put("DoUp", new UpPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),
				"DoDown");
		world.getActionMap().put("DoDown", new DownPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0),
				"DoLeft");
		world.getActionMap().put("DoLeft", new LeftPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0),
				"DoRight");
		world.getActionMap().put("DoRight", new RightPressAction(frame, world));
		world.getInputMap().put(KeyStroke.getKeyStroke(' '), "DoSpace");
		world.getActionMap().put("DoSpace", new SpacePressAction(world));

		world.getInputMap().put(KeyStroke.getKeyStroke('p'), "DoP");
		world.getActionMap()
				.put("DoP",
						new PPressAction(world, enemyThread, goldThread,
								mainGameThread));

		world.getInputMap().put(KeyStroke.getKeyStroke('z'), "DoZ");
		world.getActionMap().put("DoZ", new ZPressAction(world));

		frame.setResizable(true);
		panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
		scoreBoard.setSize(600, 100);
		scoreBoard.setBackground(Color.RED);
		infoBoard.setSize(200, 200);
		panel.add(Box.createVerticalStrut(GAP));
		panel.add(world);
		panel.add(Box.createVerticalStrut(GAP));
		panel.add(scoreBoard);
		panel.add(infoBoard);
		frame.add(panel);

		frame.pack();

		frame.setSize(new Dimension(FRAME_WIDTH + 19, 900));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);

		// keeps track of time to limit how often the player can move
		startTime = System.currentTimeMillis();
		shootTime = System.currentTimeMillis();
		while (true) {
			if (System.currentTimeMillis() - startTime > 291 && !pause) {
				startTime = System.currentTimeMillis();
				canMove = true;
			}
			if (System.currentTimeMillis() - shootTime > 2000 && !pause) {
				shootTime = System.currentTimeMillis();
				canShoot = true;
				infoBoard.updateCanShoot(true);
				infoBoard.repaint();

			}

		}

	}

	/**
	 * 
	 * @param levelNumber
	 *            - level to load
	 * @return
	 * @throws IOException
	 * 
	 *             loads the level
	 */
	public static int[][] loadLevel(String levelNumber) throws IOException {
		String fileName = "C:/EclipseWorkspaces/csse220/ArcadeGameProject/src/";
		fileName = fileName + levelNumber;
		File file = new File(fileName);

		Scanner inScanner = null;
		try {
			inScanner = new Scanner(file);
			for (int i = 0; i < currentLevel.length; i++) {

				for (int j = 0; j < currentLevel[i].length; j++) {

					currentLevel[i][j] = inScanner.nextInt();
				}
			}

		} finally {
			inScanner.close();
		}
		gold.clear();
		return currentLevel;
	}

	/**
	 * 
	 * @return - returns canMove
	 */
	public boolean getCanMove() {
		return canMove;
	}

	/**
	 * 
	 * Closes the window when you lose.
	 *
	 */

	public static void close() {

		System.out.println("You Lose");
		LocalEnvironment.endGame();
		
		JFrame endScreen = new JFrame();
		endScreen.setSize(600, 900);
		endScreen.setVisible(true);
		EndGameScreen endGame = new EndGameScreen(endScreen);

		endScreen.add(endGame);
		
		frame.dispose();
		enemyThread.suspend();
		goldThread.suspend();
		mainGameThread.suspend();
		canMove = false;
		canShoot = false;
//		JLabel scoreLabel = new JLabel("Your Final Score is " + Scoreboard.getScore() + "!");
//		endScreen.add(scoreLabel);
		endScreen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		System.exit(0);

	}

	/**
	 * 
	 * Subtracts a life when you die.
	 *
	 */
	public static void loseLife() {
		lives--;
		InfoComponent.updateLives();
		int size = enemies.size();
		for (int i = 0; i < size; i++) {
			enemies.get(i).die();
		}
		enemies.clear();

	}

	/**
	 * 
	 * Returns the number of lives left.
	 *
	 * @return return the number of lives left.
	 */

	public static int getLives() {
		return lives;
	}
	
	/**
	 * does the music
	 * void return
	 */
	public static void music()
	{
		int bufferSize = 128000;
		File soundFile = null;
		AudioFormat audioFormat;
		SourceDataLine sourceLine = null;
		//AudioPlayer ap = AudioPlayer.player;
		AudioInputStream as = null;
		//AudioData ad;
		//ContinuousAudioDataStream loop = null;
		try{
			soundFile = new File("C:/EclipseWorkspaces/csse220/ArcadeGameProject/src/Miner_39_s_song.wav");
		}catch (Exception e) {
			System.out.println("file not found");
		}
		try{
		as = AudioSystem.getAudioInputStream(soundFile);
		} catch(Exception e2) {
			System.out.println("audiostream error");
			System.exit(1);
		}
		audioFormat = as.getFormat();
		
		DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
		try {
			sourceLine = (SourceDataLine) AudioSystem.getLine(info);
			sourceLine.open(audioFormat);
		} catch (LineUnavailableException e) {
			System.out.println("Line Unavailable exception");
			System.exit(1);
		} catch(Exception e) {
			System.out.println("Stack Trace");
			System.exit(1);
		}
		
		sourceLine.start();
		
		int nBytesRead = 0;
		byte[] abData = new byte[bufferSize];
		boolean shouldPrint = true;
		while (nBytesRead != -1) {
			try {
				nBytesRead = as.read(abData, 0, abData.length);
			} catch (IOException e) {
				System.out.println("IO Exception");
			}
			if (nBytesRead >= 0) {
				int nBytesWritten = sourceLine.write(abData,0,nBytesRead);
				if (shouldPrint)
				{
					System.out.println(nBytesWritten);
					shouldPrint = false;
				}
			}
			
		}
		sourceLine.drain();
		sourceLine.close();
		
	}
	
	static Runnable musicPlayer = new Runnable(){

		@Override
		public void run() {
			music();
		}
		
	};

	// public static void addGold(GoldBag bag) {
	// gold.add(bag);
	// }
}
